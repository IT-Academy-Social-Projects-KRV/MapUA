# Docs: https://swagger.io/docs/specification/basic-structure/

openapi: 3.0.0
info:
  title: MapUA API
  description: An API for MapUA application
  version: 1.0.0

servers:
  - url: http://localhost:3001
    description: Local server for development

components:
 schemas:
     Users:
       type: object
       required:
         - email
         - passwordHash
       properties:
         id:
             type: string
             description: The auto-generated id of the user
         email:
             type: string
             description: Name of the user
         displayName:
              type: string
              description: Email of the user
       example:
           id: 1
           email: anymail@gmail.com
           displayName: Vasia Pupkin
     Locations:
       type: object
       required:
         - locationName
         - account
       properties:
         locationName:
             type: string
             description: This is name
         coordinates:
             type: [number, number]
             description: Two coordinates in array
         photoSrc:
              type: string
              description: Location photo
         description:
              type: string
              description: Location description
         comments:
              type: string
              description: Location comments
         rating:
              type: object
              properties:
               like:
                type: number
               dislike:
                type: number
              description: Location ratings

tags:
 - name: Users
   description: The users managing API
 - name: Locations
   description: The locations managing API

paths:
  /users:
     get:
       summary: returns the list of all users
       tags: [Users]
       responses:
           200:
             description: The list of the users
             content:
              aplication/json:
                 schema:
                   type: array
                   items:
                   $ref: "#/components/schemas/Users"
  /locations/:id:
    get:
      summary: returns location by id
      tags: [Locations]
      responses:
          200:
            description: The location by id
            content:
              aplication/json:
                schema:
                  type: object
                  items: [number]
                  $ref: "#/components/schemas/Locations"
          400:
            description: Bad request. Location doesn`t find by id
  /api/signin:
    post:
      summary: Register user using his email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: Vasia Pupkin
                password:
                  type: string
                  example: whatever-string
      tags: [Users]
      responses:
          200:
            description: Registered user dictionary and accessToken
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    email:
                      type: string
                      example: Vasia Pupkin
                    password:
                      type: string
                      example: whatever-string
          400:
            description: Bad Request